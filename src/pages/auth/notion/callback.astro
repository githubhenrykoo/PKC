---
// Notion OAuth callback handler
export const prerender = false;

const { url } = Astro;
const code = url.searchParams.get('code');
const state = url.searchParams.get('state');
const error = url.searchParams.get('error');

console.log('Notion OAuth callback received:', { code, state, error });
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Notion Authentication - PKC</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        padding: 20px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
      }
      .container {
        background: white;
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        max-width: 500px;
        width: 100%;
      }
      .loading {
        color: #6b7280;
      }
      .success {
        color: #059669;
      }
      .error {
        color: #dc2626;
      }
      .spinner {
        border: 2px solid #f3f4f6;
        border-top: 2px solid #3b82f6;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      .icon {
        font-size: 48px;
        margin-bottom: 16px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div id="status-container">
        <div class="spinner"></div>
        <h2 class="loading">Processing Notion Authentication...</h2>
        <p class="loading">Please wait while we complete your authentication.</p>
      </div>
    </div>

    <script define:vars={{ code, state, error }}>
      console.log('Notion OAuth callback processing:', { code, state, error });

      async function processNotionCallback() {
        const statusContainer = document.getElementById('status-container');
        
        try {
          // Check for OAuth error
          if (error) {
            throw new Error(`OAuth Error: ${error}`);
          }

          // Check for required parameters
          if (!code) {
            throw new Error('Missing authorization code from Notion');
          }

          // Prepare redirect URI for token exchange
          const redirectUri = `${window.location.origin}/auth/notion/callback`;

          console.log('Exchanging code for access token...');

          // Exchange authorization code for access token using our server-side endpoint
          const tokenResponse = await fetch('/api/notion/oauth/token', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              code: code,
              redirect_uri: redirectUri
            })
          });

          const responseData = await tokenResponse.json();
          
          if (!tokenResponse.ok || !responseData.success) {
            console.error('Token exchange failed:', responseData);
            throw new Error(responseData.error || `Failed to exchange code for token: ${tokenResponse.status}`);
          }

          const tokenData = responseData.data;
          console.log('Token exchange successful:', { 
            hasAccessToken: !!tokenData.access_token,
            workspaceName: tokenData.workspace_name,
            workspaceId: tokenData.workspace_id
          });

          // Store the access token and workspace info
          localStorage.setItem('notion_access_token', tokenData.access_token);
          localStorage.setItem('notion_workspace_name', tokenData.workspace_name || '');
          localStorage.setItem('notion_workspace_id', tokenData.workspace_id || '');
          localStorage.setItem('notion_bot_id', tokenData.bot_id || '');

          // Show success message
          statusContainer.innerHTML = `
            <div class="icon success">✅</div>
            <h2 class="success">Notion Connected Successfully!</h2>
            <p>Workspace: <strong>${tokenData.workspace_name || 'Unknown'}</strong></p>
            <p class="loading">Redirecting you back to the application...</p>
          `;

          // Notify parent window if in popup
          if (window.opener) {
            window.opener.postMessage({
              type: 'notion-auth-success',
              data: {
                access_token: tokenData.access_token,
                workspace_name: tokenData.workspace_name,
                workspace_id: tokenData.workspace_id,
                bot_id: tokenData.bot_id
              }
            }, window.location.origin);
            
            // Close popup after a short delay
            setTimeout(() => {
              window.close();
            }, 2000);
          } else {
            // Redirect back to main application
            setTimeout(() => {
              window.location.href = '/';
            }, 2000);
          }

        } catch (error) {
          console.error('Notion OAuth callback error:', error);
          
          statusContainer.innerHTML = `
            <div class="icon error">❌</div>
            <h2 class="error">Authentication Failed</h2>
            <p class="error">${error.message}</p>
            <p class="loading">Redirecting you back to try again...</p>
          `;

          // Notify parent window of error if in popup
          if (window.opener) {
            window.opener.postMessage({
              type: 'notion-auth-error',
              error: error.message
            }, window.location.origin);
            
            setTimeout(() => {
              window.close();
            }, 3000);
          } else {
            // Redirect back to main application
            setTimeout(() => {
              window.location.href = '/';
            }, 3000);
          }
        }
      }

      // Start processing when page loads
      processNotionCallback();
    </script>
  </body>
</html>
