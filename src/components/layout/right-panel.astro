---
// Right panel with navigation buttons for Google services
---
<aside class="rounded-lg bg-[var(--surface)] border border-black/5 dark:border-white/10 p-4">
  <h2 class="text-sm font-semibold opacity-70 mb-2">Right Panel</h2>
    
  <!-- Google Calendar Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">Google Calendar</h3>
    <button 
      id="google-calendar-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
      </svg>
      <span class="text-sm">View Calendar</span>
    </button>
    <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
      Manage your events and schedules
    </div>
  </div>

  <!-- Google Docs Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">Google Docs</h3>
    <button 
      id="google-docs-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-orange-50 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 hover:bg-orange-100 dark:hover:bg-orange-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
      </svg>
      <span class="text-sm">Open Docs</span>
    </button>
    <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
      Access and edit documents
    </div>
  </div>

  <!-- Google Slides Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">Google Slides</h3>
    <button 
      id="google-slides-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-purple-50 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 hover:bg-purple-100 dark:hover:bg-purple-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
      </svg>
      <span class="text-sm">View Slides</span>
    </button>
    <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
      Create and view presentations
    </div>
  </div>

  <!-- AI Assistant Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">AI Assistant</h3>
    <button 
      id="ai-chat-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-green-50 dark:bg-green-900/30 text-green-700 dark:text-green-300 hover:bg-green-100 dark:hover:bg-green-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"/>
        <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"/>
      </svg>
      <span class="text-sm">Open Chat</span>
    </button>
    <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
      Ollama LLM with RAG capabilities
    </div>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const calendarBtn = document.getElementById('google-calendar-btn');
    const googleDocsBtn = document.getElementById('google-docs-btn');
    const googleSlidesBtn = document.getElementById('google-slides-btn');
    const aiChatBtn = document.getElementById('ai-chat-btn');
    
    if (calendarBtn) {
      calendarBtn.addEventListener('click', () => {
        showGoogleCalendar();
      });
    }

    if (googleDocsBtn) {
      googleDocsBtn.addEventListener('click', () => {
        showGoogleDocs();
      });
    }

    if (googleSlidesBtn) {
      googleSlidesBtn.addEventListener('click', () => {
        showGoogleSlides();
      });
    }

    if (aiChatBtn) {
      aiChatBtn.addEventListener('click', () => {
        showAIChat();
      });
    }
  });

  function showGoogleCalendar() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
      </svg>
      Google Calendar
    `;
    
    if (contentType) contentType.textContent = 'Google Calendar Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Calendar React component
    loadGoogleCalendarComponent(rendererSlot);
  }

  async function loadGoogleCalendarComponent(rendererSlot) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleCalendar } = await import('../googlecalendar/googlecalendar.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-calendar-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-calendar-container');
      
      if (container) {
        // Create React root and render Google Calendar component
        const root = createRoot(container);
        root.render(React.createElement(GoogleCalendar, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Calendar component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Calendar</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Calendar interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showGoogleDocs() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
      </svg>
      Google Docs
    `;
    
    if (contentType) contentType.textContent = 'Google Docs Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Docs React component
    loadGoogleDocsComponent(rendererSlot);
  }

  async function loadGoogleDocsComponent(rendererSlot) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleDocsPanel } = await import('../googledocs/googledocs.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-docs-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-docs-container');
      
      if (container) {
        // Create React root and render Google Docs component
        const root = createRoot(container);
        root.render(React.createElement(GoogleDocsPanel, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Docs component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Docs</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Docs interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showGoogleSlides() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
      </svg>
      Google Slides
    `;
    
    if (contentType) contentType.textContent = 'Google Slides Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Slides React component
    loadGoogleSlidesComponent(rendererSlot);
  }

  async function loadGoogleSlidesComponent(rendererSlot) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleSlidesPanel } = await import('../googleslides/googleslides.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-slides-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-slides-container');
      
      if (container) {
        // Create React root and render Google Slides component
        const root = createRoot(container);
        root.render(React.createElement(GoogleSlidesPanel, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Slides component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Slides</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Slides interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showAIChat() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"/>
        <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"/>
      </svg>
      AI Assistant
    `;
    
    if (contentType) contentType.textContent = 'RAG-enabled AI Chat';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the RAG Browser component
    loadAIChatComponent(rendererSlot);
  }

  async function loadAIChatComponent(rendererSlot) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { RAGBrowser } = await import('../RAG/RAGBrowser');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="ai-chat-container" class="h-full w-full"></div>`;
      const container = document.getElementById('ai-chat-container');
      
      if (container) {
        // Create React root and render RAG Browser component
        const root = createRoot(container);
        root.render(React.createElement(RAGBrowser, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load AI Chat component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load AI Chat</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the AI Chat interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }
</script>
