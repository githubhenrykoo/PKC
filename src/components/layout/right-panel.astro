---
// Right panel with navigation buttons for Google services
---
<aside class="rounded-lg bg-[var(--surface)] border border-black/5 dark:border-white/10 p-4">
  <h2 class="text-sm font-semibold opacity-70 mb-2">Right Panel</h2>

  <!-- Google Services Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">Productivity</h3>

    <button 
    id="google-calendar-btn"
    class="w-full text-left px-3 py-2 rounded-lg bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors flex items-center gap-2"
  >
    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
    </svg>
    <span class="text-sm">Google Calendar</span>
    </button>

    <button 
      id="google-docs-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-orange-50 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300 hover:bg-orange-100 dark:hover:bg-orange-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
      </svg>
      <span class="text-sm">Google Docs</span>
    </button>

    <button
    id="google-slides-btn"
    class="w-full text-left px-3 py-2 rounded-lg bg-purple-50 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 hover:bg-purple-100 dark:hover:bg-purple-900/50 transition-colors flex items-center gap-2"
  >
    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
    </svg>
    <span class="text-sm">Google Slides</span>
    </button>
  </div>
    
    <button 
      id="notion-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
        <path d="M4.459 4.208c.746.606 1.781.54 3.042.444 1.26-.095 2.763-.24 4.41-.24 1.6 0 3.08.13 4.32.24 1.24.11 2.18.16 2.94-.04.76-.2 1.4-.64 1.9-1.3.5-.66.74-1.44.74-2.34h-4.5c0 .56-.1 1.02-.3 1.38-.2.36-.44.6-.74.72-.3.12-.64.16-1.02.12-.38-.04-.74-.14-1.08-.3-.34-.16-.63-.4-.87-.72-.24-.32-.4-.7-.48-1.14h-4.5c0 .9.24 1.68.74 2.34.5.66 1.14 1.1 1.9 1.3z"/>
      </svg>
      <span class="text-sm">Notion</span>
    </button>
  </div>

  <!-- IoT & Monitoring Section -->
  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">IoT & Monitoring</h3>
    
    <!-- ThingsBoard -->
    <button 
      id="thingsboard-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-teal-50 dark:bg-teal-900/30 text-teal-700 dark:text-teal-300 hover:bg-teal-100 dark:hover:bg-teal-900/50 transition-colors flex items-center gap-2 mb-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
      </svg>
      <span class="text-sm">ThingsBoard</span>
    </button>
    
    <!-- ThingsBoard Dashboard -->
    <button 
      id="thingsboard-dashboard-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-cyan-50 dark:bg-cyan-900/30 text-cyan-700 dark:text-cyan-300 hover:bg-cyan-100 dark:hover:bg-cyan-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
        <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
      </svg>
      <span class="text-sm">ThingsBoard Dashboard</span>
    </button>
  </div>

  <div class="mt-4 pt-4 border-t border-black/5 dark:border-white/10">
    <h3 class="text-sm font-semibold opacity-70 mb-3">AI Assistant</h3>
    
    <!-- Chatbot -->
    <button 
      id="chatbot-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors flex items-center gap-2 mb-2"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
      </svg>
      <span class="text-sm">PKC Telegram</span>
    </button>
    
    <!-- RAG Intelligence -->
    <button 
      id="ai-chat-btn"
      class="w-full text-left px-3 py-2 rounded-lg bg-green-50 dark:bg-green-900/30 text-green-700 dark:text-green-300 hover:bg-green-100 dark:hover:bg-green-900/50 transition-colors flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"/>
        <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"/>
      </svg>
      <span class="text-sm">RAG Intelligence</span>
    </button>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const calendarBtn = document.getElementById('google-calendar-btn');
    const googleDocsBtn = document.getElementById('google-docs-btn');
    const googleSlidesBtn = document.getElementById('google-slides-btn');
    const chatbotBtn = document.getElementById('chatbot-btn');
    const aiChatBtn = document.getElementById('ai-chat-btn');
    const notionBtn = document.getElementById('notion-btn');
    const thingsBoardBtn = document.getElementById('thingsboard-btn');
    const thingsBoardDashboardBtn = document.getElementById('thingsboard-dashboard-btn');
    
    if (calendarBtn) {
      calendarBtn.addEventListener('click', () => {
        showGoogleCalendar();
      });
    }

    if (googleDocsBtn) {
      googleDocsBtn.addEventListener('click', () => {
        showGoogleDocs();
      });
    }

    if (googleSlidesBtn) {
      googleSlidesBtn.addEventListener('click', () => {
        showGoogleSlides();
      });
    }

    if (chatbotBtn) {
      chatbotBtn.addEventListener('click', () => {
        showChatbot();
      });
    }

    if (aiChatBtn) {
      aiChatBtn.addEventListener('click', () => {
        showAIChat();
      });
    }

    if (notionBtn) {
      notionBtn.addEventListener('click', () => {
        showNotion();
      });
    }

    if (thingsBoardBtn) {
      thingsBoardBtn.addEventListener('click', () => {
        showThingsBoard();
      });
    }

    if (thingsBoardDashboardBtn) {
      thingsBoardDashboardBtn.addEventListener('click', () => {
        showThingsBoardDashboard();
      });
    }
  });

  function showGoogleCalendar() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
      </svg>
      Google Calendar
    `;
    
    if (contentType) contentType.textContent = 'Google Calendar Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Calendar React component
    loadGoogleCalendarComponent(rendererSlot);
  }

  /**
   * Loads and renders the Google Calendar component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadGoogleCalendarComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleCalendar } = await import('../googlecalendar/googlecalendar.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-calendar-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-calendar-container');
      
      if (container) {
        // Create React root and render Google Calendar component
        const root = createRoot(container);
        root.render(React.createElement(GoogleCalendar, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Calendar component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Calendar</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Calendar interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showGoogleDocs() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
      </svg>
      Google Docs
    `;
    
    if (contentType) contentType.textContent = 'Google Docs Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Docs React component
    loadGoogleDocsComponent(rendererSlot);
  }

  /**
   * Loads and renders the Google Docs component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadGoogleDocsComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleDocsPanel } = await import('../googledocs/googledocs.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-docs-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-docs-container');
      
      if (container) {
        // Create React root and render Google Docs component
        const root = createRoot(container);
        root.render(React.createElement(GoogleDocsPanel, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Docs component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Docs</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Docs interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showGoogleSlides() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
      </svg>
      Google Slides
    `;
    
    if (contentType) contentType.textContent = 'Google Slides Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Google Slides React component
    loadGoogleSlidesComponent(rendererSlot);
  }

  /**
   * Loads and renders the Google Slides component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadGoogleSlidesComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: GoogleSlidesPanel } = await import('../googleslides/googleslides.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="google-slides-container" class="h-full w-full"></div>`;
      const container = document.getElementById('google-slides-container');
      
      if (container) {
        // Create React root and render Google Slides component
        const root = createRoot(container);
        root.render(React.createElement(GoogleSlidesPanel, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Google Slides component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Google Slides</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Google Slides interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showChatbot() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
      </svg>
      PKC Telegram
    `;
    
    if (contentType) contentType.textContent = 'PKC Telegram Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the Chatbot component
    loadChatbotComponent(rendererSlot);
  }

  async function loadChatbotComponent(rendererSlot) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: Chatbot } = await import('../chatbot/chatbot.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="chatbot-container" class="h-full w-full"></div>`;
      const container = document.getElementById('chatbot-container');
      
      if (container) {
        // Create React root and render Chatbot component
        const root = createRoot(container);
        root.render(React.createElement(Chatbot, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Chatbot component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">🤖</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load PKC Telegram</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the PKC Telegram interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
            <div class="mt-4">
              <p class="text-xs text-gray-400 dark:text-gray-500">Make sure Ollama is running on localhost:11434</p>
            </div>
          </div>
        </div>
      `;
    }
  }

  function showNotion() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M4.459 4.208c.746.606 1.781.54 3.042.444 1.26-.095 2.763-.24 4.41-.24 1.6 0 3.08.13 4.32.24 1.24.11 2.18.16 2.94-.04.76-.2 1.4-.64 1.9-1.3.5-.66.74-1.44.74-2.34h-4.5c0 .56-.1 1.02-.3 1.38-.2.36-.44.6-.74.72-.3.12-.64.16-1.02.12-.38-.04-.74-.14-1.08-.3-.34-.16-.63-.4-.87-.72-.24-.32-.4-.7-.48-1.14h-4.5c0 .9.24 1.68.74 2.34.5.66 1.14 1.1 1.9 1.3z"/>
      </svg>
      Notion
    `;
    
    if (contentType) contentType.textContent = 'Notion Integration';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the actual Notion React component
    loadNotionComponent(rendererSlot);
  }

  /**
   * Loads and renders the Notion component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadNotionComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: NotionPanel } = await import('../notion/notion.jsx');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="notion-container" class="h-full w-full"></div>`;
      const container = document.getElementById('notion-container');
      
      if (container) {
        // Create React root and render Notion component
        const root = createRoot(container);
        root.render(React.createElement(NotionPanel, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load Notion component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load Notion</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the Notion interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showAIChat() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"/>
        <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"/>
      </svg>
      RAG Intelligence
    `;
    
    if (contentType) contentType.textContent = 'RAG-enabled AI Chat';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the RAG Browser component
    loadAIChatComponent(rendererSlot);
  }

  /**
   * Loads and renders the AI Chat component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadAIChatComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { RAGBrowser } = await import('../RAG/RAGBrowser');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="ai-chat-container" class="h-full w-full"></div>`;
      const container = document.getElementById('ai-chat-container');
      
      if (container) {
        // Create React root and render RAG Browser component
        const root = createRoot(container);
        root.render(React.createElement(RAGBrowser, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load AI Chat component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load AI Chat</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the AI Chat interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  function showThingsBoard() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
      </svg>
      ThingsBoard
    `;
    
    if (contentType) contentType.textContent = 'IoT Device Management';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the ThingsBoard TelemetryPanel component
    loadThingsBoardComponent(rendererSlot);
  }

  function showThingsBoardDashboard() {
    const contentTitle = document.getElementById('content-title');
    const contentType = document.getElementById('content-type');
    const contentTimestamp = document.getElementById('content-timestamp');
    const placeholder = document.getElementById('content-placeholder');
    const rendererSlot = document.getElementById('renderer-slot');

    if (!contentTitle || !rendererSlot) return;

    // Update header
    contentTitle.innerHTML = `
      <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
      </svg>
      ThingsBoard Dashboard
    `;
    
    if (contentType) contentType.textContent = 'IoT Dashboard & Analytics';
    if (contentTimestamp) contentTimestamp.textContent = new Date().toLocaleString();

    // Hide placeholder and show renderer slot
    if (placeholder) placeholder.classList.add('hidden');
    rendererSlot.classList.remove('hidden');

    // Load the ThingsBoard Dashboard component
    loadThingsBoardDashboardComponent(rendererSlot);
  }

  /**
   * Loads and renders the ThingsBoard TelemetryPanel component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadThingsBoardComponent(rendererSlot: HTMLElement) {
    try {
      // Import React and create root
      const React = await import('react');
      const { createRoot } = await import('react-dom/client');
      const { default: TelemetryPanel } = await import('../thingsboard/TelemetryPanel');

      // Create container for the React component
      rendererSlot.innerHTML = `<div id="thingsboard-container" class="h-full w-full"></div>`;
      const container = document.getElementById('thingsboard-container');
      
      if (container) {
        // Create React root and render TelemetryPanel component
        const root = createRoot(container);
        root.render(React.createElement(TelemetryPanel as any, { 
          className: 'h-full' 
        }));
      }
    } catch (error) {
      console.error('Failed to load ThingsBoard component:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load ThingsBoard</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the ThingsBoard interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }

  /**
   * Loads and renders the ThingsBoard Dashboard component
   * @param {HTMLElement} rendererSlot - The DOM element where the component will be rendered
   */
  async function loadThingsBoardDashboardComponent(rendererSlot: HTMLElement) {
    try {
      // Load the dashboard content dynamically based on runtime environment
      const timestamp = Date.now();
      const response = await fetch(`/runtime-env.json?t=${timestamp}`, { 
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
      
      if (response.ok) {
        const env = await response.json();
        const dashboardUrl = env.PUBLIC_THINGSBOARD_DASHBOARD_URL;
        
        if (dashboardUrl) {
          // Show ThingsBoard dashboard iframe
          rendererSlot.innerHTML = `
            <div class="h-full w-full bg-white border rounded-xl shadow-sm overflow-hidden">
              <div class="bg-gray-50 border-b px-4 py-2 flex items-center justify-between">
                <div class="flex items-center gap-2">
                  <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span class="text-sm font-medium text-gray-700">ThingsBoard Dashboard</span>
                </div>
                <a href="${dashboardUrl}" target="_blank" class="text-xs text-blue-600 hover:text-blue-800">
                  Open in New Tab ↗
                </a>
              </div>
              <iframe 
                src="${dashboardUrl}" 
                class="w-full h-full border-0"
                title="ThingsBoard Dashboard"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
              ></iframe>
            </div>
          `;
        } else {
          // Fallback to TelemetryPanel if no dashboard URL
          const React = await import('react');
          const { createRoot } = await import('react-dom/client');
          const { default: TelemetryPanel } = await import('../thingsboard/TelemetryPanel');

          rendererSlot.innerHTML = `
            <div class="h-full w-full">
              <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                <div class="flex items-center gap-2">
                  <svg class="w-5 h-5 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                  <span class="text-sm font-medium text-yellow-800">Dashboard URL not configured</span>
                </div>
                <p class="text-sm text-yellow-700 mt-1">Showing TelemetryPanel instead. Configure PUBLIC_THINGSBOARD_DASHBOARD_URL in your .env file.</p>
              </div>
              <div id="thingsboard-dashboard-fallback" class="h-full w-full"></div>
            </div>
          `;
          
          const container = document.getElementById('thingsboard-dashboard-fallback');
          if (container) {
            const root = createRoot(container);
            root.render(React.createElement(TelemetryPanel as any, { 
              className: 'h-full' 
            }));
          }
        }
      } else {
        throw new Error('Failed to load runtime environment');
      }
    } catch (error) {
      console.error('Failed to load ThingsBoard Dashboard:', error);
      rendererSlot.innerHTML = `
        <div class="h-full flex items-center justify-center">
          <div class="text-center p-8">
            <div class="text-red-500 text-4xl mb-4">⚠️</div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Failed to Load ThingsBoard Dashboard</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to initialize the ThingsBoard Dashboard interface.</p>
            <p class="text-sm text-gray-500 dark:text-gray-500">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>
          </div>
        </div>
      `;
    }
  }
</script>
